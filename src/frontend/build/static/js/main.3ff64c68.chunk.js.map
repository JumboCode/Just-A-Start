{"version":3,"sources":["serviceWorker.js","pages/loginButton.jsx","pages/form.jsx","pages/checkbox.jsx","pages/login.jsx","index.js"],"names":["Boolean","window","location","hostname","match","LoginButton","state","buttonStyle","backgroundColor","height","width","position","borderRadius","textStyle","fontFamily","color","fontSize","fontWeight","hoverColor","setState","style","this","onMouseOver","onMouseLeave","onClick","props","loginClick","Component","Form","username","password","componentDidUpdate","prevProps","prevState","isClicked","console","log","sendLoginRequest","u","p","setFields","_un","value","_ps","changeUsernameHandler","event","target","changePasswordHandler","ref","el","type","onChange","placeholder","id","forgotPassword","CheckBox","isChecked","handleCheck","checked","ischecked","defaultChecked","Login","keepLoggedIn","printFields","didCheckBox","didForgetPassword","retrieveUserInfo","handleClick","setTimeout","getUserInfo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ff64c68.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass LoginButton extends Component {\n    state = {\n      buttonStyle: {backgroundColor: '#16629f', height: '42px', width: '120px',\n                    position: 'relative', borderRadius: '5px'},\n      textStyle: {fontFamily: 'Arial', color: 'white', fontSize: '20px', fontWeight: 'bold'}\n    };\n    render() {\n        return (\n            <button style={this.state.buttonStyle} onMouseOver=\n            {() => this.hoverColor('gray')} onMouseLeave=\n            {() => this.hoverColor('#16629f')} onClick={this.props.loginClick}>\n              <span style={this.state.textStyle}> Log in </span>\n            </button>\n        );\n    }\n\n    hoverColor = (color) => {\n      this.setState({buttonStyle: {...this.state.buttonStyle, backgroundColor: color}});\n    }\n\n\n\n\n}\n\nexport default LoginButton;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './form.css';\n\nclass Form extends Component {\n    state = {\n      username: \"\",\n      password: \"\"\n\n    };\n\n    componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.isClicked != this.props.isClicked) {\n        console.log(this.state.username);\n        console.log(this.state.password);\n        //this.props.getUserInfo(this.state.username, this.state.password);\n        this.sendLoginRequest(this.state.username, this.state.password);\n      }\n\n\n    }\n\n    sendLoginRequest = (u, p) => {\n\n    }\n\n    setFields = () => {\n      this.setState({username: this._un.value, password: this._ps.value});\n    }\n\n    changeUsernameHandler = (event) => {\n      this.setState({username: event.target.value});\n    }\n    changePasswordHandler = (event) => {\n      this.setState({password: event.target.value});\n\n    }\n\n    render() {\n        return (\n          <div>\n            <div>\n              <input ref={(el) => this._un = el} type=\"text\" value={this.state.username}\n              onChange={this.changeUsernameHandler} placeholder=\"Username/Email address\">\n              </input>\n            </div>\n\n            <div>\n              <input ref={(el) => this._ps = el} type=\"password\" value={this.state.password}\n              onChange={this.changePasswordHandler} placeholder=\"Password\" >\n              </input>\n            </div>\n            <div>\n              <span id=\"forgotPass\" onClick={() => this.props.forgotPassword()}>\n              Forgot Password? </span>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './form.css';\nimport './checkbox.css';\n\nclass CheckBox extends Component {\n    state = {\n      isChecked: false\n    };\n\n    handleCheck = (event) => {\n      this.setState((prevState, props) => (\n        {checked: (prevState.ischecked == false) ? true : false}));\n      //console.log(\"In checkbox:\" + this.state.isChecked);\n      this.props.checked();\n    }\n    render() {\n        return (\n          <label>\n            <input type=\"checkbox\" defaultChecked={this.state.isChecked} onChange={this.handleCheck}/>\n            <span id=\"checkbox-text\"> Keep me logged in </span>\n          </label>\n        );\n    }\n\n}\n\nexport default CheckBox;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport LoginButton from './loginButton.jsx';\nimport Form from './form.jsx';\nimport CheckBox from './checkbox.jsx';\nimport './login.css';\n\nclass Login extends Component {\n    state = {\n      username: \"\",\n      password: \"\",\n      isClicked: false,\n      forgotPassword: false,\n      keepLoggedIn: false\n    };\n\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n          <div id=\"background\">\n            <div id=\"wrapper\">\n              <div id=\"loginText\">\n                Log in\n              </div>\n              <div id=\"form\">\n                <Form getUserInfo={this.retrieveUserInfo} forgotPassword={this.didForgetPassword}\n                isClicked={this.state.isClicked}/>\n              </div>\n              <div id=\"loginButton\">\n                <LoginButton loginClick={this.handleClick} isClicked={this.state.isClicked}/>\n              </div>\n              <div id=\"checkbox\">\n                <CheckBox checked={this.didCheckBox}/>\n              </div>\n            </div>\n          </div>\n        );\n    }\n\n\n    componentDidUpdate = (prevProps, prevState) => {\n      if (prevState.username != this.state.username) {\n        this.printFields();\n      }\n      if (prevState.forgotPassword != this.state.forgotPassword) {\n        console.log(this.state.forgotPassword);\n      }\n      if (prevState.keepLoggedIn != this.state.keepLoggedIn) {\n        console.log(this.state.keepLoggedIn);\n      }\n    }\n\n    didCheckBox = () => {\n      this.setState((prevState, props) =>\n        ({keepLoggedIn: (prevState.keepLoggedIn == true) ? false : true}));\n    }\n\n    didForgetPassword = () => {\n      this.setState((prevState, props) =>\n        ({forgotPassword: true}));\n    }\n\n    retrieveUserInfo = (u, p) => {\n      this.setState({username: u, password: p});\n    }\n\n    handleClick = () => {\n      console.log(\"Clicked\");\n      this.setState((prevState, props) =>\n        ({isClicked: prevState.isClicked == false ? true : false}));\n      setTimeout(10, this.printFields);\n      this.printFields();\n    }\n\n    printFields = () => {\n      console.log(this.state.username);\n      console.log(this.state.password);\n    }\n}\n\nexport default Login;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './pages/login.jsx';\n// import CheckBox from './pages/checkbox.jsx';\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}