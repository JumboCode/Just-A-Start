{"version":3,"sources":["pages/LoginPage.jsx","pages/LoginForm.jsx","pages/user_navbar.jsx","pages/404.jsx","App.js","serviceWorker.js","pages/loginButton.jsx","pages/form.jsx","pages/checkbox.jsx","pages/login.jsx","index.js"],"names":["LoginPage","props","state","to","Component","LoginForm","onSubmit","submitEndpoint","fetch","then","catch","formVisibility","this","type","placeholder","NavbarPage","isOpen","toggleCollapse","setState","color","dark","expand","className","onClick","id","navbar","left","active","nav","caret","href","right","waves","aria-label","MainPage","Boolean","window","location","hostname","match","LoginButton","buttonStyle","backgroundColor","height","width","position","borderRadius","textStyle","fontFamily","fontSize","fontWeight","hoverColor","style","onMouseOver","onMouseLeave","loginClick","Form","username","password","componentDidUpdate","prevProps","prevState","isClicked","console","log","sendLoginRequest","u","p","setFields","_un","value","_ps","changeUsernameHandler","event","target","changePasswordHandler","ref","el","onChange","forgotPassword","CheckBox","isChecked","handleCheck","checked","ischecked","defaultChecked","Login","keepLoggedIn","printFields","didCheckBox","didForgetPassword","retrieveUserInfo","handleClick","setTimeout","getUserInfo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8079bceb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass LoginPage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Link to=\"admin-login\">Admin Login</Link>\n\t\t\t\t<Link to=\"alumni-login\">Alumni Login</Link>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default LoginPage;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass LoginForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tformVisibility: 'off',\n\t\t}\n\t}\n\n\tonSubmit = () => {\n\t\tconst { submitEndpoint } = this.props;\n\t\t/* placeholder for backend endpoint */\n\t\tfetch(`localhost:xxxx/${submitEndpoint}`)\n\t\t\t.then(() => {})\n\t\t\t.catch(() => {});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t<input type=\"text\" placeholder=\"username/email address\"/>\n\t\t\t\t\t<input type=\"password\" placeholder=\"password\"/>\n\t\t\t\t\t<Link to=\"\">Forgot Password?</Link>\n\t\t\t\t\t<input type=\"submit\" />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default LoginForm;","// import React, { pages } from 'react';\n\n// class NavBar extends pages {\n//     render() {\n//       return (\n//         <React.Fragment>\n//           <nav className=\"navbar navbar-dark bg-dark mb-3\">\n//             <a className=\"navbar-brand\" href=\"#\">\n//               <h1>Jobs </h1>\n//               <h2>Event </h2>\n//               <h3>Alumni </h3>\n//               <h4> USER </h4>\n//             </a>\n//           </nav>\n//         </React.Fragment>\n//       );\n//     }\n//   }\n   \n//   export default NavBar;\n\nimport React, { Component } from \"react\";\nimport {\nMDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBFormInline,\nMDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem\n} from \"mdbreact\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nclass NavbarPage extends Component {\nstate = {\n  isOpen: false\n};\n\ntoggleCollapse = () => {\n  this.setState({ isOpen: !this.state.isOpen });\n}\n\nrender() {\n  return (\n    <Router>\n      <MDBNavbar color=\"blue\" dark expand=\"md\">\n        <MDBNavbarBrand>\n          <strong className=\"white-text\">Navbar</strong>\n        </MDBNavbarBrand>\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n          <MDBNavbarNav left>\n            <MDBNavItem active>\n              <MDBNavLink to=\"#!\">Jobs</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBNavLink to=\"#!\">Events</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBNavLink to=\"#!\">Alumni</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBDropdown>\n                <MDBDropdownToggle nav caret>\n                  <span className=\"mr-2\">User</span>\n                </MDBDropdownToggle>\n                <MDBDropdownMenu>\n                  <MDBDropdownItem href=\"#!\">Action</MDBDropdownItem>\n                  <MDBDropdownItem href=\"#!\">Another Action</MDBDropdownItem>\n                  <MDBDropdownItem href=\"#!\">Something else here</MDBDropdownItem>\n                  <MDBDropdownItem href=\"#!\">Something else here</MDBDropdownItem>\n                </MDBDropdownMenu>\n              </MDBDropdown>\n            </MDBNavItem>\n          </MDBNavbarNav>\n          <MDBNavbarNav right>\n            <MDBNavItem>\n              <MDBFormInline waves>\n                <div className=\"md-form my-0\">\n                  <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\n                </div>\n              </MDBFormInline>\n            </MDBNavItem>\n          </MDBNavbarNav>\n        </MDBCollapse>\n      </MDBNavbar>\n    </Router>\n    );\n  }\n}\n\nexport default NavbarPage","import React from \"react\";\n\nconst MainPage = () => {\n    \n    return (\n        <div>\n            <h1>404 Not Found</h1>\n        </div>\n    );\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport './App.css';\nimport { \n  BrowserRouter, \n  Route, \n  Switch, \n} from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport LoginForm from \"./pages/LoginForm\";\nimport NavbarPage from \"./pages/user_navbar\";\nimport NotFoundPage from \"./pages/404\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route\n            exact\n            path=\"/admin-login\"\n            render={props => (\n              <LoginForm submitEndpoint=\"/xxx\" {...props}/>\n          )}/>\n          <Route\n            exact\n            path=\"/alumni-login\"\n            render={props => (\n              <LoginForm submitEndpoint=\"/xxx\" {...props}/>\n          )}/>\n          <Route\n            exact\n            path=\"/user-navbar\"\n            render={props => (\n              <NavbarPage submitEndpoint=\"/xxx\" {...props}/>\n          )}/>\n          <Route exact path=\"/\" component={LoginPage} />\n          <Route component={NotFoundPage}></Route>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass LoginButton extends Component {\n    state = {\n      buttonStyle: {backgroundColor: '#16629f', height: '42px', width: '120px',\n                    position: 'relative', borderRadius: '5px'},\n      textStyle: {fontFamily: 'Arial', color: 'white', fontSize: '20px', fontWeight: 'bold'}\n    };\n    render() {\n        return (\n            <button style={this.state.buttonStyle} onMouseOver=\n            {() => this.hoverColor('gray')} onMouseLeave=\n            {() => this.hoverColor('#16629f')} onClick={this.props.loginClick}>\n              <span style={this.state.textStyle}> Log in </span>\n            </button>\n        );\n    }\n\n    hoverColor = (color) => {\n      this.setState({buttonStyle: {...this.state.buttonStyle, backgroundColor: color}});\n    }\n\n\n\n\n}\n\nexport default LoginButton;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './form.css';\n\nclass Form extends Component {\n    state = {\n      username: \"\",\n      password: \"\"\n\n    };\n\n    componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.isClicked != this.props.isClicked) {\n        console.log(this.state.username);\n        console.log(this.state.password);\n        //this.props.getUserInfo(this.state.username, this.state.password);\n        this.sendLoginRequest(this.state.username, this.state.password);\n      }\n\n\n    }\n\n    sendLoginRequest = (u, p) => {\n\n    }\n\n    setFields = () => {\n      this.setState({username: this._un.value, password: this._ps.value});\n    }\n\n    changeUsernameHandler = (event) => {\n      this.setState({username: event.target.value});\n    }\n    changePasswordHandler = (event) => {\n      this.setState({password: event.target.value});\n\n    }\n\n    render() {\n        return (\n          <div>\n            <div>\n              <input ref={(el) => this._un = el} type=\"text\" value={this.state.username}\n              onChange={this.changeUsernameHandler} placeholder=\"Username/Email address\">\n              </input>\n            </div>\n\n            <div>\n              <input ref={(el) => this._ps = el} type=\"password\" value={this.state.password}\n              onChange={this.changePasswordHandler} placeholder=\"Password\" >\n              </input>\n            </div>\n            <div>\n              <span id=\"forgotPass\" onClick={() => this.props.forgotPassword()}>\n              Forgot Password? </span>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './form.css';\nimport './checkbox.css';\n\nclass CheckBox extends Component {\n    state = {\n      isChecked: false\n    };\n\n    handleCheck = (event) => {\n      this.setState((prevState, props) => (\n        {checked: (prevState.ischecked == false) ? true : false}));\n      //console.log(\"In checkbox:\" + this.state.isChecked);\n      this.props.checked();\n    }\n    render() {\n        return (\n          <label>\n            <input type=\"checkbox\" defaultChecked={this.state.isChecked} onChange={this.handleCheck}/>\n            <span id=\"checkbox-text\"> Keep me logged in </span>\n          </label>\n        );\n    }\n\n}\n\nexport default CheckBox;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport LoginButton from './loginButton.jsx';\nimport Form from './form.jsx';\nimport CheckBox from './checkbox.jsx';\nimport './login.css';\n\nclass Login extends Component {\n    state = {\n      username: \"\",\n      password: \"\",\n      isClicked: false,\n      forgotPassword: false,\n      keepLoggedIn: false\n    };\n\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n          <div id=\"background\">\n            <div id=\"wrapper\">\n              <div id=\"loginText\">\n                Log in\n              </div>\n              <div id=\"form\">\n                <Form getUserInfo={this.retrieveUserInfo} forgotPassword={this.didForgetPassword}\n                isClicked={this.state.isClicked}/>\n              </div>\n              <div id=\"loginButton\">\n                <LoginButton loginClick={this.handleClick} isClicked={this.state.isClicked}/>\n              </div>\n              <div id=\"checkbox\">\n                <CheckBox checked={this.didCheckBox}/>\n              </div>\n            </div>\n          </div>\n        );\n    }\n\n\n    componentDidUpdate = (prevProps, prevState) => {\n      if (prevState.username != this.state.username) {\n        this.printFields();\n      }\n      if (prevState.forgotPassword != this.state.forgotPassword) {\n        console.log(this.state.forgotPassword);\n      }\n      if (prevState.keepLoggedIn != this.state.keepLoggedIn) {\n        console.log(this.state.keepLoggedIn);\n      }\n    }\n\n    didCheckBox = () => {\n      this.setState((prevState, props) =>\n        ({keepLoggedIn: (prevState.keepLoggedIn == true) ? false : true}));\n    }\n\n    didForgetPassword = () => {\n      this.setState((prevState, props) =>\n        ({forgotPassword: true}));\n    }\n\n    retrieveUserInfo = (u, p) => {\n      this.setState({username: u, password: p});\n    }\n\n    handleClick = () => {\n      console.log(\"Clicked\");\n      this.setState((prevState, props) =>\n        ({isClicked: prevState.isClicked == false ? true : false}));\n      setTimeout(10, this.printFields);\n      this.printFields();\n    }\n\n    printFields = () => {\n      console.log(this.state.username);\n      console.log(this.state.password);\n    }\n}\n\nexport default Login;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './pages/login.jsx';\nimport CheckBox from './pages/checkbox.jsx';\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}