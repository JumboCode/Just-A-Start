{"version":3,"sources":["pages/LoginPage.jsx","pages/LoginForm.jsx","pages/404.jsx","App.js","serviceWorker.js","index.js"],"names":["LoginPage","props","state","to","Component","LoginForm","onSubmit","submitEndpoint","fetch","then","catch","formVisibility","this","type","placeholder","MainPage","App","exact","path","render","component","NotFoundPage","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAoBeA,E,YAhBd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,GAFK,E,sEAOlB,OACC,6BACC,kBAAC,IAAD,CAAMC,GAAG,eAAT,eACA,kBAAC,IAAD,CAAMA,GAAG,gBAAT,qB,GAXoBC,aC8BTC,E,YA7Bd,WAAYJ,GAAQ,IAAD,8BAClB,4CAAMA,KAMPK,SAAW,WAAO,IACTC,EAAmB,EAAKN,MAAxBM,eAERC,MAAM,kBAAD,OAAmBD,IACtBE,MAAK,eACLC,OAAM,gBAVR,EAAKR,MAAQ,CACZS,eAAgB,OAHC,E,sEAgBlB,OACC,6BACC,0BAAML,SAAUM,KAAKN,UACpB,2BAAOO,KAAK,OAAOC,YAAY,2BAC/B,2BAAOD,KAAK,WAAWC,YAAY,aACnC,kBAAC,IAAD,CAAMX,GAAG,IAAT,oBACA,2BAAOU,KAAK,iB,GAvBOT,aCQTW,EATE,WAEb,OACI,6BACI,+CC8BGC,E,iLAvBX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,eACLC,OAAQ,SAAAlB,GAAK,OACX,kBAAC,EAAD,eAAWM,eAAe,QAAWN,OAEzC,kBAAC,IAAD,CACEgB,OAAK,EACLC,KAAK,gBACLC,OAAQ,SAAAlB,GAAK,OACX,kBAAC,EAAD,eAAWM,eAAe,QAAWN,OAEzC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIE,UAAWpB,IACjC,kBAAC,IAAD,CAAOoB,UAAWC,U,GAlBVjB,aCCEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.88c68fa9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass LoginPage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Link to=\"admin-login\">Admin Login</Link>\n\t\t\t\t<Link to=\"alumni-login\">Alumni Login</Link>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default LoginPage;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass LoginForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tformVisibility: 'off',\n\t\t}\n\t}\n\n\tonSubmit = () => {\n\t\tconst { submitEndpoint } = this.props;\n\t\t/* placeholder for backend endpoint */\n\t\tfetch(`localhost:xxxx/${submitEndpoint}`)\n\t\t\t.then(() => {})\n\t\t\t.catch(() => {});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t<input type=\"text\" placeholder=\"username/email address\"/>\n\t\t\t\t\t<input type=\"password\" placeholder=\"password\"/>\n\t\t\t\t\t<Link to=\"\">Forgot Password?</Link>\n\t\t\t\t\t<input type=\"submit\" />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default LoginForm;","import React from \"react\";\n\nconst MainPage = () => {\n    \n    return (\n        <div>\n            <h1>404 Not Found</h1>\n        </div>\n    );\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport './App.css';\nimport { \n  BrowserRouter, \n  Route, \n  Switch, \n} from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport LoginForm from \"./pages/LoginForm\";\nimport NotFoundPage from \"./pages/404\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route\n            exact\n            path=\"/admin-login\"\n            render={props => (\n              <LoginForm submitEndpoint=\"/xxx\" {...props}/>\n          )}/>\n          <Route\n            exact\n            path=\"/alumni-login\"\n            render={props => (\n              <LoginForm submitEndpoint=\"/xxx\" {...props}/>\n          )}/>\n          <Route exact path=\"/\" component={LoginPage} />\n          <Route component={NotFoundPage}></Route>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}